# Auto-generated using compose2nix v0.3.2-pre.
{
  lib,
  config,
  pkgs,
  secrets,
  systemOpts,
  serviceOpts,
  ...
}: {
  # Containers
  virtualisation.oci-containers.containers."swag" = {
    image = "lscr.io/linuxserver/swag:latest";
    environment = {
      "DNSPLUGIN" = "cloudflare";
      "DOCKER_MODS" = "linuxserver/mods:swag-auto-reload";
      "EMAIL" = "${secrets.admin-mail.address}";
      "ONLY_SUBDOMAINS" = "true";
      "PGID" = "1000";
      "PROPAGATION" = "";
      "PUID" = "1000";
      "STAGING" = "false";
      "SUBDOMAINS" = "wildcard";
      "TZ" = "${systemOpts.timezone}";
      "URL" = "${secrets.selfhosting.domain}";
      "VALIDATION" = "dns";
    };
    volumes = [
      "${serviceOpts.dockerDir}/swag/config:/config"
      "${serviceOpts.dockerDir}/swag/proxy-confs:/config/nginx/proxy-confs"
      "/run/secrets/selfhosting/testvm/cloudflareToken:/config/dns-conf/cloudflare.ini"
    ];
    ports = [
      "443:443/tcp"
    ];
    user = config.users.users.${serviceOpts.dockerUser}.uid;
    log-driver = "journald";
    extraOptions = [
      "--cap-add=NET_ADMIN"
      "--network-alias=swag"
      "--network=swag_default"
    ];
  };
  systemd.services."podman-swag" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    after = [
      "podman-network-swag_default.service"
    ];
    requires = [
      "podman-network-swag_default.service"
    ];
    partOf = [
      "podman-compose-swag-root.target"
    ];
    wantedBy = [
      "podman-compose-swag-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-swag_default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f swag_default";
    };
    script = ''
      podman network inspect swag_default || podman network create swag_default
    '';
    partOf = [ "podman-compose-swag-root.target" ];
    wantedBy = [ "podman-compose-swag-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-swag-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = ["multi-user.target"];
  };
}
