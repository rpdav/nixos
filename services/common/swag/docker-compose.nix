# Auto-generated using compose2nix v0.3.2-pre.
{
  lib,
  config,
  pkgs,
  secrets,
  systemOpts,
  serviceOpts,
  uptix,
  ...
}: {
  # Containers
  virtualisation.oci-containers.containers."swag" = {
    image = uptix.dockerImage "lscr.io/linuxserver/swag:latest";
    environment = {
      "DNSPLUGIN" = "cloudflare";
      "EMAIL" = "${secrets.admin-mail.address}";
      "DOCKER_MODS" = "linuxserver/mods:swag-auto-reload|linuxserver/mods:swag-dashboard";
      "ONLY_SUBDOMAINS" = "true";
      "PGID" = "1000";
      "PROPAGATION" = "";
      "PUID" = "1000";
      "STAGING" = "false";
      "SUBDOMAINS" = "wildcard";
      "TZ" = "${systemOpts.timezone}";
      "URL" = "${secrets.selfhosting.domain}";
      "VALIDATION" = "dns";
    };
    volumes = [
      "${serviceOpts.dockerDir}/swag/config:/config"
      "${serviceOpts.proxyDir}:/config/nginx/proxy-confs"
      "/run/secrets/selfhosting/swag/cloudflareToken:/config/dns-conf/cloudflare.ini"
    ];
    ports = [
      "443:443/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--cap-add=NET_ADMIN"
      "--network-alias=swag"
      "--network=proxynet"
    ];
  };
  systemd.services."docker-swag" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    partOf = [
      "docker-compose-swag-root.target"
    ];
    wantedBy = [
      "docker-compose-swag-root.target"
    ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-swag-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = ["multi-user.target"];
  };
}
