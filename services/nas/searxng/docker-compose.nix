# Auto-generated using compose2nix v0.3.2-pre.
{
  pkgs,
  lib,
  secrets,
  uptix,
  config,
  ...
}: {
  # Containers
  virtualisation.oci-containers.containers."searxng-app" = {
    image = uptix.dockerImage "searxng/searxng:latest";
    environment = {
      "SEARXNG_BASE_URL" = "https://search.${secrets.selfhosting.domain}";
      "UWSGI_THREADS" = "2";
      "UWSGI_WORKERS" = "2";
    };
    volumes = [
      "${config.serviceOpts.dockerDir}/searxng/config:/etc/searxng:rw"
    ];
    log-driver = "journald";
    extraOptions = [
      "--cap-add=CHOWN"
      "--cap-add=SETGID"
      "--cap-add=SETUID"
      "--cap-drop=ALL"
      "--network-alias=app"
      "--network=proxynet"
      "--network=searxng_default"
    ];
  };
  systemd.services."docker-searxng-app" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-searxng_default.service"
    ];
    requires = [
      "docker-network-searxng_default.service"
    ];
    partOf = [
      "docker-compose-searxng-root.target"
    ];
    wantedBy = [
      "docker-compose-searxng-root.target"
    ];
  };
  virtualisation.oci-containers.containers."searxng-redis" = {
    image = uptix.dockerImage "valkey/valkey:8-alpine";
    volumes = [
      "${config.serviceOpts.dockerDir}/searxng/redis:/data:rw"
    ];
    cmd = ["valkey-server" "--save" "30" "1" "--loglevel" "warning"];
    log-driver = "journald";
    extraOptions = [
      "--cap-add=DAC_OVERRIDE"
      "--cap-add=SETGID"
      "--cap-add=SETUID"
      "--cap-add=CHOWN"
      "--cap-drop=ALL"
      "--network-alias=redis"
      "--network=searxng_default"
    ];
  };
  systemd.services."docker-searxng-redis" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-searxng_default.service"
    ];
    requires = [
      "docker-network-searxng_default.service"
    ];
    partOf = [
      "docker-compose-searxng-root.target"
    ];
    wantedBy = [
      "docker-compose-searxng-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-searxng_default" = {
    path = [pkgs.docker];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f searxng_default";
    };
    script = ''
      docker network inspect searxng_default || docker network create searxng_default
    '';
    partOf = ["docker-compose-searxng-root.target"];
    wantedBy = ["docker-compose-searxng-root.target"];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-searxng-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = ["multi-user.target"];
  };
}
