# Auto-generated using compose2nix v0.3.2-pre.
{
  pkgs,
  lib,
  serviceOpts,
  uptix,
  secrets,
  ...
}: {
  # Containers
  virtualisation.oci-containers.containers."planka-app" = {
    image = uptix.dockerImage "ghcr.io/plankanban/planka:2.0.0-rc.3";
    environment = {
      "BASE_URL" = "https://projects.${secrets.selfhosting.domain}";
      "DATABASE_URL" = "postgresql://postgres@postgres/planka";
      "LOG_LEVEL" = "warn";
      "TRUST_PROXY" = "true";
    };
    volumes = [
      "${serviceOpts.dockerDir}/planka/favicons:/app/public/favicons:rw"
      "${serviceOpts.dockerDir}/planka/user-avatars:/app/public/user-avatars:rw"
      "${serviceOpts.dockerDir}/planka/attachments:/app/private/attachments:rw"
      "${serviceOpts.dockerDir}/planka/background-images:/app/public/background-images:rw"
    ];
    ports = [
      "3001:1337/tcp"
    ];
    dependsOn = [
      "planka-postgres"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=app"
      "--network=planka_default"
      "--network=proxynet"
    ];
    environmentFiles = [
      "/run/secrets/selfhosting/planka/env"
    ];
  };
  systemd.services."docker-planka-app" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "on-failure";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-planka_default.service"
    ];
    requires = [
      "docker-network-planka_default.service"
    ];
    partOf = [
      "docker-compose-planka-root.target"
    ];
    wantedBy = [
      "docker-compose-planka-root.target"
    ];
  };
  virtualisation.oci-containers.containers."planka-postgres" = {
    image = "postgres:16-alpine";
    environment = {
      "POSTGRES_DB" = "planka";
      "POSTGRES_HOST_AUTH_METHOD" = "trust";
    };
    volumes = [
      "${serviceOpts.dockerDir}/planka/db-data:/var/lib/postgresql/data:rw"
    ];
    log-driver = "journald";
    extraOptions = [
      "--health-cmd=pg_isready -U postgres -d planka"
      "--health-interval=10s"
      "--health-retries=5"
      "--health-timeout=5s"
      "--network-alias=postgres"
      "--network=planka_default"
    ];
  };
  systemd.services."docker-planka-postgres" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "on-failure";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-planka_default.service"
    ];
    requires = [
      "docker-network-planka_default.service"
    ];
    partOf = [
      "docker-compose-planka-root.target"
    ];
    wantedBy = [
      "docker-compose-planka-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-planka_default" = {
    path = [pkgs.docker];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f planka_default";
    };
    script = ''
      docker network inspect planka_default || docker network create planka_default
    '';
    partOf = ["docker-compose-planka-root.target"];
    wantedBy = ["docker-compose-planka-root.target"];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-planka-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = ["multi-user.target"];
  };
}
