# Auto-generated using compose2nix v0.3.2-pre.
{
  pkgs,
  lib,
  config,
  uptix,
  ...
}: {
  # Containers
  virtualisation.oci-containers.containers."borgserver" = {
    image = uptix.dockerImage "nold360/borgserver:latest";
    environment = {
      "PGID" = "100";
      "PUID" = "1000";
    };
    volumes = [
      "/mnt/storage/backups/borg:/backup:rw"
      "${config.serviceOpts.dockerDir}/borg/sshkeys/:/sshkeys:rw"
    ];
    ports = [
      "2222:22/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=borgserver"
      "--network=borg_default"
    ];
  };
  systemd.services."docker-borgserver" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "no";
    };
    after = [
      "docker-network-borg_default.service"
    ];
    requires = [
      "docker-network-borg_default.service"
    ];
    partOf = [
      "docker-compose-borg-root.target"
    ];
    wantedBy = [
      "docker-compose-borg-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-borg_default" = {
    path = [pkgs.docker];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f borg_default";
    };
    script = ''
      docker network inspect borg_default || docker network create borg_default
    '';
    partOf = ["docker-compose-borg-root.target"];
    wantedBy = ["docker-compose-borg-root.target"];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-borg-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = ["multi-user.target"];
  };
}
